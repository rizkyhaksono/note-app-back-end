{
    "info": {
        "_postman_id": "5a3101d0-a4d7-4057-86e1-193318965175",
        "name": "Note API Test",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "18031605"
    },
    "item": [
        {
            "name": "Adding Notes",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": ["pm.test('response Content-Type header should have application/json value', () => {", "  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');", "}); "],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"title\": \"Catatan A\",\n   \"tags\": [\"Android\", \"Web\"],\n   \"body\": \"Isi dari catatan A\"\n} ",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "localhost:5000/notes",
                    "host": ["localhost"],
                    "port": "5000",
                    "path": ["notes"]
                }
            },
            "response": []
        },
        {
            "name": "Getting All Notes",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('response body data should have a notes array and contain at least 1 item', () => {",
                            "   const responseJson = pm.response.json();",
                            "   const { data } = responseJson;",
                            " ",
                            "   pm.expect(data).to.have.ownProperty('notes');",
                            "   pm.expect(data.notes).to.be.an('array');",
                            "   pm.expect(data.notes).lengthOf.at.least(1);",
                            "}); "
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "localhost:5000/notes",
                    "host": ["localhost"],
                    "port": "5000",
                    "path": ["notes"]
                }
            },
            "response": []
        },
        {
            "name": "Getting Specified Note",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('note object should contain correct value for id, title, body, and tags property', () => {",
                            "   const responseJson = pm.response.json();",
                            "   const { data: { note } } = responseJson;",
                            " ",
                            "   const expectedId = pm.environment.get('noteId');",
                            "   const expectedTitle = 'Catatan A';",
                            "   const expectedTags = ['Android', 'Web'];",
                            "   const expectedBody = 'Isi dari catatan A';",
                            " ",
                            "   pm.expect(note).to.have.ownProperty('id');",
                            "   pm.expect(note.id).to.equals(expectedId);",
                            " ",
                            "   pm.expect(note).to.have.ownProperty('title');",
                            "   pm.expect(note.title).to.equals(expectedTitle);",
                            " ",
                            "   pm.expect(note).to.have.ownProperty('tags');",
                            "   pm.expect(note.tags).to.eql(expectedTags);",
                            " ",
                            "   pm.expect(note).to.have.ownProperty('body');",
                            "   pm.expect(note.body).to.equals(expectedBody);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "localhost:5000/notes/{{noteId}}",
                    "host": ["localhost"],
                    "port": "5000",
                    "path": ["notes", "{{noteId}}"]
                }
            },
            "response": []
        },
        {
            "name": "Update Note",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('when request the updated note', () => {",
                            "    const noteId = pm.environment.get('noteId');",
                            "    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {",
                            "        if(!error) {",
                            "            pm.test('then the updated note should contain the latest data', () => {",
                            "                const responseJson = response.json();",
                            "                const { data: { note } } = responseJson;",
                            " ",
                            "                const expectedTitle = 'Catatan A Revised';",
                            "                const expectedTags = ['Android', 'Web'];",
                            "                const expectedBody = 'Isi dari Catatan A Revised';",
                            " ",
                            "                pm.expect(note.title).to.equals(expectedTitle);",
                            "                pm.expect(note.tags).to.eql(expectedTags);",
                            "                pm.expect(note.body).to.equals(expectedBody);",
                            "            });",
                            "        }",
                            "    });",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "PUT",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"title\": \"Catatan A Revised\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari Catatan A Revised\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "localhost:5000/notes/{{noteId}}",
                    "host": ["localhost"],
                    "port": "5000",
                    "path": ["notes", "{{noteId}}"]
                }
            },
            "response": []
        },
        {
            "name": "Delete Note",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('when request the deleted note', () => {",
                            "    const noteId = pm.environment.get('noteId');",
                            "    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {",
                            "        if(!error) {",
                            "            pm.test('the deleted note should be not found', () => {",
                            "                pm.expect(response.code).to.equals(404);",
                            "                const responseJson = response.json();",
                            "                pm.expect(responseJson.status).to.equals('fail');",
                            "                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');",
                            "            });",
                            "        }",
                            "    });",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "localhost:5000/notes/{{noteId}}",
                    "host": ["localhost"],
                    "port": "5000",
                    "path": ["notes", "{{noteId}}"]
                }
            },
            "response": []
        }
    ]
}
